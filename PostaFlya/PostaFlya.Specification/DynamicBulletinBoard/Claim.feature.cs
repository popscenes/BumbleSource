// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.55
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PostaFlya.Specification.DynamicBulletinBoard
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.55")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [MbUnit.Framework.TestFixtureAttribute()]
    [MbUnit.Framework.DescriptionAttribute("As a BROWSER\r\nI want to be able to claim a tear off\r\nSo that my claim will be rec" +
        "orded")]
    public partial class ClaimTearOffFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [MbUnit.Framework.FixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ClaimTearOff", "As a BROWSER\r\nI want to be able to claim a tear off\r\nSo that my claim will be rec" +
                    "orded", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [MbUnit.Framework.FixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [MbUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [MbUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Claim A Tear Off")]
        public virtual void ClaimATearOff()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claim A Tear Off", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I have navigated to the public view page for a FLIER");
            testRunner.When("I claim a tear off for that FLIER");
            testRunner.Then("I will be recorded as having claimed the flier once");
            testRunner.And("the number of claims against the FLIER will be incremented");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Cant Claim Two Tear Offs  Flier")]
        public virtual void CantClaimTwoTearOffsFlier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cant Claim Two Tear Offs  Flier", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I have navigated to the public view page for a FLIER");
            testRunner.And("I have already claimed a tear off for that FLIER");
            testRunner.When("I claim a tear off for that FLIER");
            testRunner.Then("I will be recorded as having claimed the flier once");
            testRunner.And("the FLIER tear off claims will remain the same");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("View Flier Claims")]
        public virtual void ViewFlierClaims()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Flier Claims", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I have navigated to the public view page for a FLIER");
            testRunner.And("Someone has claimed a tear off for a FLIER");
            testRunner.Then("I should see the claimed tear offs for the FLIER");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Tear Off Claim Publishes Tear Off Notification")]
        [MbUnit.Framework.CategoryAttribute("TearOffNotification")]
        public virtual void TearOffClaimPublishesTearOffNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tear Off Claim Publishes Tear Off Notification", new string[] {
                        "TearOffNotification"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I have navigated to the public view page for a FLIER");
            testRunner.When("I claim a tear off for that FLIER");
            testRunner.Then("A Notification for that Tear Off should be published");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
