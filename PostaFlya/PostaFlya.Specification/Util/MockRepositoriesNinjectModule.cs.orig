using System;
using System.Collections.Generic;
using System.Linq;
using MbUnit.Framework;
using Moq;
using Ninject;
using Ninject.MockingKernel.Moq;
using Ninject.Modules;
using TechTalk.SpecFlow;
using WebSite.Application.Browser;
using PostaFlya.Domain.Browser;
using PostaFlya.Domain.Browser.Command;
using PostaFlya.Domain.Browser.Query;
using PostaFlya.Domain.Flier;
using PostaFlya.Domain.Flier.Command;
using PostaFlya.Domain.Flier.Query;
using PostaFlya.Domain.Location;
using PostaFlya.Domain.Tag;
using WebSite.Infrastructure.Authentication;
using PostaFlya.Mocks.Domain.Data;


namespace WebSite.Specification.Util
{

    public class MockRepositoriesNinjectModule : NinjectModule
    {
        public override void Load()
        {
            var kernel = Kernel as MoqMockingKernel;
            Assert.IsNotNull(kernel, "should be using mock kernel for tests");

            SetUpBrowserInformation(kernel);
            SetUpBrowserRepositoryAndQueryService(kernel);
            SetUpFlierRepositoryAndQueryService(kernel);
            SetPrincipal(kernel);

        }

        private void SetUpFlierRepositoryAndQueryService(MoqMockingKernel kernel)
        {
            Func<HashSet<FlierInterface>> store = () => SpecUtil.GetMockStore<HashSet<FlierInterface>>("flierstore");
            

            var locationService = Kernel.Get<LocationServiceInterface>();

            var flierRepository = kernel.GetMock<FlierRepositoryInterface>();
            kernel.Bind<FlierRepositoryInterface>()
                .ToConstant(flierRepository.Object).InSingletonScope();

            kernel.Bind<FlierQueryServiceInterface>()
                .ToConstant(flierRepository.Object).InSingletonScope();

            flierRepository.Setup(o => o.Store(It.IsAny<Flier>()))
                .Returns<FlierInterface>(f => 
                    store().Add(f));

            flierRepository.Setup(o => o.GetById(It.IsAny<string>()))
                .Returns<string>(id => 
                    store().SingleOrDefault(f => f.Id == id));

            flierRepository.Setup(o => o.GetByBrowserId(It.IsAny<Guid>()))
                .Returns<Guid>(id => 
                    store().Where(f => f.BrowserId == id).AsQueryable());


            

            
            
            flierRepository.Setup(o => o.FindFliersByLocationAndTags(It.IsAny<Location>(), It.IsAny<Tags>()))
                .Returns<Location, Tags>(
                    (l, t) =>
                        {
                            BoundingBox boundingBox = locationService.GetDefaultBox(l);

                            return store()
                                .Where(
                                    f =>
                                    locationService.IsWithinBoundingBox(boundingBox, f.Location) &&
                                    f.Tags.Intersect(t).Any()
                                 ).AsQueryable();
                        }
                );

            flierRepository.Setup(o => o.FindFliersByLocationTagsAndDistance(It.IsAny<Location>(), It.IsAny<Tags>(), It.IsAny<int>()))
                .Returns<Location, Tags, int>(
                    (l, t, d) =>
                    {
                        BoundingBox boundingBox = locationService.GetBoundingBox(l, d);

                        return store()
                            .Where(
                                f =>
                                locationService.IsWithinBoundingBox(boundingBox, f.Location) &&
                                f.Tags.Intersect(t).Any()
                             ).AsQueryable();
                    }
                );

            FlierTestData.AddSomeDataToMockFlierStore(flierRepository.Object, Kernel);    
        }

        public void SetPrincipal(MoqMockingKernel kerne)
        {
            var mockPrincipal = kerne.GetMock<StsPrincipalInterface>();

            kerne.Bind<StsPrincipalInterface>()
                .ToConstant(mockPrincipal.Object).InSingletonScope();

            mockPrincipal.Setup(p => p.UniqueIdentifier).Returns("AItOawnldHWXFZoFpHDwBAMy34d1aO7qHSPz1ho");
            mockPrincipal.Setup(p => p.Name).Returns("Anthony Borg");
            mockPrincipal.Setup(p => p.EmailAddress).Returns("teddymccuddles@gmail.com");
            mockPrincipal.Setup(p => p.UniqueIdentifier).Returns("GoogleAItOawnldHWXFZoFpHDwBAMy34d1aO7qHSPz1ho");
            mockPrincipal.Setup(p => p.IdentityProvider).Returns("Google");
            mockPrincipal.Setup(p => p.Identity.IsAuthenticated).Returns(true);
        }

<<<<<<< HEAD
        private static void AddSomeDataToMockFlierStore(ISet<FlierInterface> mockStore)
        {
            var locationService = SpecUtil.CurrIocKernel.Get<LocationServiceInterface>();
            var defaultlocation = SpecUtil.CurrIocKernel.Get<Location>(ib => ib.Get<bool>("defaultlocation"));
            var boundingBox = locationService.GetDefaultBox(defaultlocation);
            var latDif = Math.Abs(boundingBox.Max.Latitude - boundingBox.Min.Latitude);
            var longDif = Math.Abs(boundingBox.Max.Longitude - boundingBox.Min.Longitude);
            var random = new Random();

            Func<bool, Location> GetRandLoc = (within) => new Location(
                    within ?
                    boundingBox.Min.Longitude + (longDif / (random.Next()%100 + 1))
                    :
                    boundingBox.Max.Longitude + ((longDif / (random.Next()%100 + 1))*2)
                    , 
                    within ?
                    boundingBox.Min.Latitude + (latDif / (random.Next()%100 + 1))
                    :
                    boundingBox.Max.Latitude + ((latDif / (random.Next() % 100 + 1))*2) 
                );

            var defaultTags = SpecUtil.CurrIocKernel.Get<Tags>(ib => ib.Get<bool>("defaulttags"));
            var otherTags = SpecUtil.CurrIocKernel.Get<Tags>(ib => ib.Get<bool>("someothertags"));
            Action<bool, Tags> GetTags = (within, tags) =>
                {
                    //add some tags within the defaults
                    if(within)
                        tags.UnionWith(defaultTags.Take((random.Next()%defaultTags.Count) + 1));
                    //add some other non existent tags
                    tags.UnionWith(otherTags.Take((random.Next() % otherTags.Count + 1)));
                };
                

            //add inside the bounds with some matching tags
            var flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now;
            GetTags(true, flier.Tags);
            flier.BrowserId = Defaults.DefaultBrowserId;
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now.AddDays(-1);
            GetTags(true, flier.Tags);
            flier.BrowserId = Defaults.DefaultBrowserId;
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now.AddDays(3);
            GetTags(true, flier.Tags);
            flier.BrowserId = Defaults.DefaultBrowserId;
            mockStore.Add(flier);

            //add inside the bounds without matching tags
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now.AddDays(0);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now.AddDays(-1);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(true)};
            flier.EffectiveDate = DateTime.Now.AddDays(3);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);

            //add some outside the bounds with some matching tags
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(0);
            GetTags(true, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(1);
            GetTags(true, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(-3);
            GetTags(true, flier.Tags);
            mockStore.Add(flier);

            //add some outside the bounds without matching tags
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(0);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(1);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);
            flier = new Flier(Guid.NewGuid()){Location = GetRandLoc(false)};
            flier.EffectiveDate = DateTime.Now.AddDays(-3);
            GetTags(false, flier.Tags);
            mockStore.Add(flier);
        }

=======
>>>>>>> 3dbb52d078010f02b30c704a9703f2588cea54e7
        private void SetUpBrowserRepositoryAndQueryService(MoqMockingKernel kernel)
        {
            Func<HashSet<BrowserInterface>> store = () => SpecUtil.GetMockStore<HashSet<BrowserInterface>>("browserstore");
            //Func<HashSet<BrowserInterface>> store = () => SpecUtil.GetMockStore<HashSet<BrowserInterface>>("browserstore");

            var mockBrowserQuery = kernel.GetMock<BrowserRepositoryInterface>();
            kernel.Bind<BrowserRepositoryInterface>()
                .ToConstant(mockBrowserQuery.Object).InSingletonScope();

            kernel.Bind<BrowserQueryServiceInterface>()
                .ToConstant(mockBrowserQuery.Object).InSingletonScope();

            mockBrowserQuery.Setup(m => m.FindById(It.IsAny<string>()))
                .Returns<string>(id =>
                    store().SingleOrDefault(b => b.Id == id));

            mockBrowserQuery.Setup(m => m.Store(It.IsAny<Browser>()))
                .Callback<BrowserInterface>(id =>
                   store().Add(id));

            AddMembersToStore(store());

        }

        public void AddMembersToStore(ISet<BrowserInterface> mockStore)
        {
            mockStore.Add(new Browser("GoogleAItOawnldHWXFZoFpHDwBAMy34d1aO7qHSPz1ho1")
            {
                Name = "Ricky",
                EmailAddress = "Ricky@gmail.com",
                Roles = new HashSet<Role>() { Role.Participant }
            });
        }

        private void SetUpBrowserInformation(MoqMockingKernel kernel)
        {
            //Bind<Guid>()
            //    .ToConstant(Defaults.DefaultBrowserId)
            //    .WhenInjectedInto<TestBrowserInformation>();



            var mockBrowserInfo = kernel.GetMock<BrowserInformationInterface>();
            kernel.Bind<BrowserInformationInterface>()
                .ToConstant(mockBrowserInfo.Object).InSingletonScope();

            mockBrowserInfo.SetupGet(m => m.Browser).Returns(GetBrowserInfo);
            //mockBrowserInfo.SetupSet<Browser>(m => m.Browser = It.IsAny<Browser>()). .Callback(SetBrowserInfo);
            mockBrowserInfo.SetupSet<BrowserInterface>(m => m.Browser = It.IsAny<BrowserInterface>()).Callback(b => SetBrowserInfo(b));
        }

        public Browser GetBrowserInfo()
        {
            var browser = new Browser(Kernel.Get<string>(bm => bm.Has("defaultbrowserid")))
            {
                //"GoogleAItOawnldHWXFZoFpHDwBAMy34d1aO7qHSPz1ho1"
                Name = "Ricky",
                EmailAddress = "Ricky@gmail.com",
                Roles = new HashSet<Role>() { Role.Participant },
<<<<<<< HEAD
                SavedLocations = new HashSet<Location>(),
=======
                SavedLocations = new Locations()
>>>>>>> 3dbb52d078010f02b30c704a9703f2588cea54e7
                
            };
            

            browser.SavedLocations.Add(new Location(20, 20));

            if (ScenarioContext.Current.ContainsKey("browserInfo"))
            {

                browser = ScenarioContext.Current.Get<Browser>("browserInfo");

            }
            else
            {
                SetBrowserInfo(browser);
            }

            return browser;
        }

        public static void SetBrowserInfo(BrowserInterface newBrowser)
            {
                if(ScenarioContext.Current.ContainsKey("browserInfo"))
                {
                    ScenarioContext.Current.Remove("browserInfo");
                    ScenarioContext.Current.Add("browserInfo", newBrowser);

                }
                else
                {
                    ScenarioContext.Current.Add("browserInfo", newBrowser);
                }
            }
    }


}
