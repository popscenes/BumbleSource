// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.55
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PostaFlya.Specification.Browsers
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.55")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [MbUnit.Framework.TestFixtureAttribute()]
    [MbUnit.Framework.DescriptionAttribute("As a Participant\r\nI want to be able to log onto the site \r\nso that I am Authentic" +
        "ated")]
    public partial class LoginFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [MbUnit.Framework.FixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Login", "As a Participant\r\nI want to be able to log onto the site \r\nso that I am Authentic" +
                    "ated", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [MbUnit.Framework.FixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [MbUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [MbUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Identity Provider Authentication Request")]
        [MbUnit.Framework.CategoryAttribute("mytag")]
        public virtual void IdentityProviderAuthenticationRequest()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Provider Authentication Request", new string[] {
                        "mytag"});
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("i have navigated to the log on page");
            testRunner.When("i provide Select an Identity Provider");
            testRunner.Then("i will be Redirected to the Identity Providers Login Page");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Identity Provider Authentication Response")]
        public virtual void IdentityProviderAuthenticationResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identity Provider Authentication Response", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("i have recieve a resonse from an Identity Provider");
            testRunner.Then("My credentials will be used to log me in");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Account Create")]
        public virtual void AccountCreate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account Create", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("i am not yet a BROWSER with PARTICIPANT ROLE");
            testRunner.When("i provide correct CREDENTIALS");
            testRunner.Then("a BROWSER with PARTICIPANT ROLE will be created for me");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Switch to existing BROWSER on Login")]
        public virtual void SwitchToExistingBROWSEROnLogin()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Switch to existing BROWSER on Login", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("i am an existing BROWSER with PARTICIPANT ROLE");
            testRunner.And("i am currently operating in a BROWSER with TEMPORARY ROLE");
            testRunner.When("i provide correct CREDENTIALS");
            testRunner.Then("my registered BROWSER will be loaded as the ACTIVE BROWSER");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("update personal details")]
        public virtual void UpdatePersonalDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("update personal details", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I am a BROWSER in PARTICIPANT ROLE");
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "FirstName",
                        "MiddleNames",
                        "Surname",
                        "Email",
                        "Address",
                        "Avatar",
                        "AddressPublic"});
            table1.AddRow(new string[] {
                        "User",
                        "FirstName",
                        "M",
                        "LastName",
                        "user@email.com",
                        "-37.769:144.979:waihi avenue",
                        "8F68AE77-0F61-4BFD-92AC-BFCA1CC5B9E2",
                        "True"});
            testRunner.When("I update my profile details with the following data:", ((string)(null)), table1);
            testRunner.Then("the profile details will be stored against my browser");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Browser Verifies Identity")]
        public virtual void BrowserVerifiesIdentity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browser Verifies Identity", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("I am a PARTICIPANT without IdentityVerified ROLE");
            testRunner.When("I verify my physical identity");
            testRunner.Then("I will have IdentityVerified ROLE");
            this.ScenarioCleanup();
        }
        
        [MbUnit.Framework.TestAttribute()]
        [MbUnit.Framework.DescriptionAttribute("Profile View")]
        public virtual void ProfileView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Profile View", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("There is an existing BROWSER with PARTICIPANT ROLE");
            testRunner.When("i navigate to the public profile view the existing BROWSER");
            testRunner.Then("i will see the existing BROWSERS fliers and likes");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
