@using System.Web.Http
@using PostaFlya.Areas.HelpPage.Models
@model HelpPageApiModel

@{ 
    var description = Model.ApiDescription;
    bool hasParameters = description.ParameterDescriptions.Count > 0;
    bool hasRequestSamples = Model.SampleRequests.Count > 0;
    bool hasResponseSamples = Model.SampleResponses.Count > 0;
}
<h1>@description.HttpMethod.Method @description.RelativePath</h1>
<div>
    @if (description.Documentation != null)
    {
        <p>@description.Documentation</p>
    }
    else
    {
        <p>No documentation available.</p>
    }

    @if (hasParameters || hasRequestSamples)
    {
        <h2>Request Information</h2>
        if (hasParameters)
        {
            <h3>Parameters</h3>
            <p>
                Note: If parameter is a complex type and is "Define this parameter in the request URI."<br/>
                These parameter need to be url encoded in the query string so for the following example:
                <pre class="sample-content">
                    {
                        "arg1":{
                            "prop1": "hello"
                        }
                        "arg2: "world"
                    }
                </pre>
                The parameters would be added to the URL as such:
                <pre class="sample-content">
                ?arg1[prop1]=hello&arg2=world
                </pre>
            </p>
            @Html.DisplayFor(apiModel => apiModel.ApiDescription.ParameterDescriptions, "Parameters")
        }
        if (hasRequestSamples)
        {
            <h3>Request body formats</h3>
            @Html.DisplayFor(apiModel => apiModel.SampleRequests, "Samples")
        }
    } 

    @if (hasResponseSamples)
    {
        <h2>Response Information</h2> 
        <h3>Response body formats</h3>
        @Html.DisplayFor(apiModel => apiModel.SampleResponses, "Samples")
    }
</div>