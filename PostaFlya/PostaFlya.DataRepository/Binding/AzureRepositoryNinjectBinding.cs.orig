using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.ServiceRuntime;
using Microsoft.WindowsAzure.StorageClient;
using Ninject;
using Ninject.Extensions.Conventions.BindingGenerators;
using Ninject.Extensions.Conventions.Syntax;
using Ninject.Modules;
using Ninject.Extensions.Conventions;
using Ninject.Syntax;
<<<<<<< HEAD
=======
using WebSite.Application.Domain.WebsiteInformation;
using WebSite.Azure.Common.Binding;
using WebSite.Azure.Common.Environment;
using WebSite.Azure.Common.Sql;
>>>>>>> b6d89b74b7c1b4ee0624b7bb8d7de29b422ff8bf
using WebSite.Azure.Common.TableStorage;
using WebSite.DataRepository.Behaviour.TaskJob;
using WebSite.DataRepository.Browser;
using WebSite.DataRepository.Flier;
using WebSite.DataRepository.Internal;
<<<<<<< HEAD
=======
using WebSite.DataRepository.Search.Implementation;
using WebSite.DataRepository.Search.Services;
using WebSite.DataRepository.WebsiteInformation;
>>>>>>> b6d89b74b7c1b4ee0624b7bb8d7de29b422ff8bf
using WebSite.Domain.Behaviour;
using WebSite.Domain.Flier;
using WebSite.Domain.Location;
using WebSite.Infrastructure.Binding;
using WebSite.Infrastructure.Command;
using WebSite.Infrastructure.Query;
using WebSite.Infrastructure.Util;

namespace WebSite.DataRepository.Binding
{
    public class AzureRepositoryNinjectBinding : NinjectModule
    {
        private readonly ConfigurationAction _repositoryScopeConfiguration;

        public AzureRepositoryNinjectBinding(ConfigurationAction repositoryScopeConfiguration)
        {
            _repositoryScopeConfiguration = repositoryScopeConfiguration;
        }

        public override void Load()
        {
            Trace.TraceInformation("Binding AzureRepositoryNinjectBinding");
            //need to call from startup code somewhere
            Bind<InitServiceInterface>().To<AzureInitCreateTables>().WithMetadata("tablestorageinit", true);

            //Kernel.Bind<WebsiteInfoServiceInterface>().To<WebsiteInfoServiceAzure>().WhenTargetHas<SourceDataSourceAttribute>();

            var kernel = Kernel as StandardKernel;
            kernel.BindRepositoriesFromCallingAssembly(_repositoryScopeConfiguration);
            Bind<AzureCommentRepository>().ToSelf();//this is only used inside other repositories so no need to configure scope etc
            Bind<AzureLikeRepository>().ToSelf();

 
            //this basically names the azure table context so
            //we can set up bindings for the Type => TableName dictionary
            Kernel.Bind<AzureTableContext>().ToSelf().Named("flier");
            Kernel.Bind<AzureTableContext>().ToSelf().Named("taskjob");
            Kernel.Bind<AzureTableContext>().ToSelf().Named("image");
            Kernel.Bind<AzureTableContext>().ToSelf().Named("browser");
            Kernel.Bind<AzureTableContext>().ToSelf().Named("comments");
            Kernel.Bind<AzureTableContext>().ToSelf().Named("likes");

            //Kernel.Bind<AzureTableContext>().ToSelf().Named("websiteinfo");
            

            Bind<PropertyGroupTableSerializerInterface>().ToMethod(context 
                => new DefaultPropertyGroupTableSerializer(CustomEdmSerializers.CustomSerializers)
                ).InSingletonScope();

            Bind<FlierSearchServiceInterface>()
                .To<TableFlierSearchService>();

            Bind<string>()
                .ToMethod(ctx =>
                              {
                                  var connString = (RoleEnvironment.IsAvailable)
                                                       ? //in the cloud (dev or real)
                                                   RoleEnvironment.GetConfigurationSettingValue(
                                                       "SearchDbConnectionString")
                                                       : AzureEnv.UseRealStorage
                                                             ? ConfigurationManager.AppSettings[
                                                                 "SearchDbConnectionString"]
                                                             : SqlInitializer.GetDevelConnectionString();
                                  var connBuilder = new SqlConnectionStringBuilder(connString);
                                  if (!AzureEnv.IsRunningInProdFabric()
                                      && !connString.Equals(SqlInitializer.GetDevelConnectionString()))
                                  {
                                      connBuilder.Encrypt = true;
                                      connBuilder.TrustServerCertificate = false;
                                  }
                                  return connBuilder.ToString();
                              }
                )
            .InSingletonScope()
            .WithMetadata("SqlMasterDbConnectionString", true);
            

            Bind<string>()
            .ToMethod(ctx 
                => {
                       var master = ctx.Kernel.Get<string>(c => c.Has("SqlMasterDbConnectionString"));
                       var masterConn = new SqlConnectionStringBuilder(master);
                       masterConn.InitialCatalog = "SearchDb";
                       return masterConn.ToString();
                    }
            )
            .WhenTargetHas<SqlSearchConnectionString>()
            .InSingletonScope();

            Trace.TraceInformation("Finished Binding AzureRepositoryNinjectBinding");
 
        }



    }
}
