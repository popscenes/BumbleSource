<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DbAddColumn" xml:space="preserve">
    <value>if not Exists(select * from sys.columns where Name = N'{1}' and Object_ID = Object_ID(N'{0}'))ALTER TABLE dbo.{0} ADD {2}</value>
  </data>
  <data name="DbCreate" xml:space="preserve">
    <value>create database {0}</value>
  </data>
  <data name="DbCreateFederation" xml:space="preserve">
    <value>CREATE FEDERATION {0}({1} {2} RANGE)</value>
  </data>
  <data name="DbCreatePrimaryKey" xml:space="preserve">
    <value>if not Exists(select * from sys.key_constraints where Parent_Object_ID = Object_ID(N'{0}') and type = 'PK')
ALTER TABLE dbo.{0} ADD CONSTRAINT PK_{0} PRIMARY KEY 
({1})</value>
  </data>
  <data name="DbCreateSpatialIndex" xml:space="preserve">
    <value>if not Exists(select * from 
    sys.spatial_indexes spat
    inner join
    sys.index_columns idxcol on idxcol.index_id = spat.index_id
    inner join
    sys.columns cols on cols.column_id = idxcol.column_id
    where  cols.Object_ID = Object_ID(N'{0}') and cols.name = N'{1}')
CREATE SPATIAL INDEX SPATIAL_{0}_{1} ON dbo.{0}({1}) 
USING GEOGRAPHY_GRID 
WITH( GRIDS  = ( LEVEL_1  = MEDIUM, LEVEL_2  = MEDIUM, LEVEL_3  = MEDIUM, LEVEL_4  = MEDIUM), 
  CELLS_PER_OBJECT  = 16, STATISTICS_NORECOMPUTE = OFF)</value>
  </data>
  <data name="DbCreateTable" xml:space="preserve">
    <value>if not Exists(select * from sys.tables where Name = N'{0}' and Object_ID = Object_ID(N'{0}')) 
create table dbo.{0}
(
  {1},
  CONSTRAINT [PK_{0}] PRIMARY KEY CLUSTERED
  ({2})
  WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)</value>
  </data>
  <data name="DbDeleteFederation" xml:space="preserve">
    <value>DROP FEDERATION {0}</value>
  </data>
  <data name="DbDeleteRecord" xml:space="preserve">
    <value>delete from {0}</value>
  </data>
  <data name="DbDeleteTable" xml:space="preserve">
    <value>if Exists(select * from sys.tables where Name = N'{0}' and Object_ID = Object_ID(N'{0}'))
drop table dbo.{0}</value>
  </data>
  <data name="DbDrop" xml:space="preserve">
    <value>drop database {0}</value>
  </data>
  <data name="DbDropConnections" xml:space="preserve">
    <value>ALTER DATABASE {0} SET READ_ONLY WITH ROLLBACK IMMEDIATE;ALTER DATABASE {0} SET READ_WRITE WITH ROLLBACK IMMEDIATE;</value>
  </data>
  <data name="DbExists" xml:space="preserve">
    <value>select count(*) as Count from sys.databases where name = '{0}'</value>
  </data>
  <data name="DbFederatedOn" xml:space="preserve">
    <value>FEDERATED ON ({0}={1})</value>
  </data>
  <data name="DbGetFederationInfo" xml:space="preserve">
    <value>SELECT fed.federation_id as FederationId
       , fed.name as Name
       , fmd.distribution_name as DistributionName
       , fmd.member_id as MemberId 
       , range_low as RangeLow
       , range_high as RangeHigh
       , typ.name as FedTyp
  FROM sys.federations fed
  JOIN sys.Federation_distributions dis ON dis.federation_id = fed.federation_id
  JOIN sys.federation_member_distributions fmd ON fmd.federation_id = fed.federation_id
  JOIN sys.types typ ON typ.system_type_id = dis.system_type_id
 ORDER BY fed.name, range_low</value>
  </data>
  <data name="DbGetRecord" xml:space="preserve">
    <value>select * from {0}</value>
  </data>
  <data name="DBHasFederation" xml:space="preserve">
    <value>select count(*) as Count from sys.federations where name = '{0}'</value>
  </data>
  <data name="DbInsertOrUpdateRecord" xml:space="preserve">
    <value>begin tran
if exists (select * from {0} with (updlock,serializable) where {1})
begin
   update {0} set {2}
   where {1}
end
else
begin
   insert into {0} ({3})
   values ({4})
end
commit tran</value>
  </data>
  <data name="DbUseFederation" xml:space="preserve">
    <value>USE FEDERATION {0}({1}={2}) WITH RESET, FILTERING=OFF</value>
  </data>
  <data name="DbUseFederationRoot" xml:space="preserve">
    <value>USE FEDERATION ROOT WITH RESET</value>
  </data>
  <data name="DbCreateSingleColIndex" xml:space="preserve">
    <value>IF NOT EXISTS (SELECT name FROM sys.indexes
            WHERE name = N'IDX_{2}_{3}')
CREATE {0} {1}CLUSTERED INDEX IDX_{2}_{3} ON {2}( {3} {4});</value>
  </data>
  <data name="DbColEqProp" xml:space="preserve">
    <value>{0} = @{0}</value>
  </data>
</root>